/*This tab manages the level layout.
* The game is mapped out in a two-dimensional array so that the level can be designed by essentially drawing it in ASCII.
* The key is as follows:
* P: Stationary platform
* Q: Platform with vertical velocity of -1
* R: Platform with vertical velocity of 1
* S: Platform with vertical velocity of .75
* B: Baddie (enemy object)
* C: Coin (pickup object)
* F: Finish flag
* Z: Castlebot at level's end
*
* The method levelSetup() scans through the array levelLayout and appends new objects to the corresponding object array.
* If the object is a platform, the method calls PlatformCheckX and Y to search for adjacent platforms. Adjacent platforms
* will increase the size of the first platform instead of producing a new object. Only the top and left sides of the 
* platform need to be mapped.
*
* The idea of mapping a level via an ASCII array was found by skimming the page:
* http://www.flashgametuts.com/tutorials/as3/how-to-create-a-platform-game-in-as3-part-3/
* The details and implementation of this method were independently devised.
*/

char[][] levelLayout ={ 
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ','R',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ','Q','Q',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','C',' ','C',' ',' ',' ',' ','P',' ',' ',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}, 
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','B','C',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P','P','P','P',' ',' ',' ','P',' ',' ',' ',' ','P','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P','P','P','P','P',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ','C',' ','P',' ',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ','P',' ',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ','B',' ',' ','P',' ',' ',' ',' ',' ',' ',' ','C',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ','P','P',' ',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P','P','P',' ',' ','P',' ',' ',' ',' ',' ',' ','C',' ','C',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ','R',' ','P',' ',' ','P',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ','Q','Q',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','C',' ',' ','P',' ',' ',' ','B',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','Z',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ','C','P','P','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ','P','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ','B',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P','P','P',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ','R',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P','P',' ',' ',' ',' ',' ',' ',' ',' ','F',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P','P','P','P','P','P','P','P',' ','Q','Q',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','B',' ','B',' ','B',' ','B',' ','B',' ','B',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ','P','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P','P'},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ','P','P','P','P','P','P','P','P','P','P','P','P','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ','P','P','P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ',' ','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ','P','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','R','P','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ','Q','Q',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','C',' ',' ',' ','P','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
      {'P','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','S','S',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
};

//char[][] levelLayout = {
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','B',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ','P',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','P','P',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ','P','P',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ','B',' ',' ','P',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ','P','P','P',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' ','P',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ','P','P','P','P','P','P','P',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
//  {' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '}};


void levelSetup(char[][] levelLayout){
  for (int i = 0; i < levelLayout.length; i++){
    for(int j = 0; j < levelLayout[i].length; j++){
      if (levelLayout[i][j] == 'P'){
         xStart = j*gridSize;
         yStart = i*gridSize;
         xSize += gridSize;
         ySize += gridSize;
         platformCheckX(j, i, levelLayout[i][j]);
         platformCheckY(j, i, levelLayout[i][j]);

        createPlatform(xStart + xSize/2, yStart+ySize/2, xSize, ySize, 0);
        xSize = 0;
        ySize = 0;
      }
      
      if (levelLayout[i][j] == 'Q'){
                 xStart = j*gridSize;
         yStart = i*gridSize;
         xSize += gridSize;
         ySize += gridSize;
         platformCheckX(j, i, levelLayout[i][j]);
         platformCheckY(j, i, levelLayout[i][j]);

        createPlatform(xStart + xSize/2, yStart+ySize/2, xSize, ySize, -1);
        xSize = 0;
        ySize = 0;
      }
      
       if (levelLayout[i][j] == 'R'){
               xStart = j*gridSize;
       yStart = i*gridSize;
       xSize += gridSize;
       ySize += gridSize;
       platformCheckX(j, i, levelLayout[i][j]);
       platformCheckY(j, i, levelLayout[i][j]);

      createPlatform(xStart + xSize/2, yStart+ySize/2, xSize, ySize, 1);
      xSize = 0;
      ySize = 0;
    }
    
    if (levelLayout[i][j] == 'S'){
      xStart = j*gridSize;
       yStart = i*gridSize;
       xSize += gridSize;
       ySize += gridSize;
       platformCheckX(j, i, levelLayout[i][j]);
       platformCheckY(j, i, levelLayout[i][j]);

      createPlatform(xStart + xSize/2, yStart+ySize/2, xSize, ySize, .75);
      xSize = 0;
      ySize = 0;
    }
      
      if (levelLayout[i][j] == 'B'){
        createBaddie(j*gridSize, i*gridSize+16);
      }
      
      if (levelLayout[i][j] == 'C'){
        createCoin(j*gridSize, i*gridSize);
      }
        
      if (levelLayout[i][j] == 'Z'){
        createCastle(j*gridSize, i*gridSize);
      }
      if (levelLayout[i][j] == 'F'){
        createFlag(j*gridSize, i*gridSize);
      }
  }
   
  }
}

void createBaddie(float x, float y){
  Baddie a = new Baddie(x, y, x - 30, x + 30);
  baddies = (Baddie[]) append(baddies,a); //Create a new object and append it to the object's array
}

void createPlatform(float x, float y, float xSize, float ySize, float speed){
  Block b = new Block(x, y, xSize, ySize, speed);
  platforms = (Block[]) append(platforms,b);
}

void createCoin(float x, float y){
  Coin c = new Coin(x, y);
  coins = (Coin[]) append(coins,c);
}

void createCastle(float x, float y){
  Castle z = new Castle(x, y+10);
  castles = (Castle[]) append(castles, z);
}

void createFlag(float x, float y){
  Flag f = new Flag(x, y+gridSize);
  flags = (Flag[]) append(flags, f);
}
  
void platformCheckY(int j, int i, char test){ // "test" allows the function to check for adjacent platforms of the same type
  
  if(i + 1 < levelLayout.length){
    if(levelLayout[i + 1][j] == test){
      ySize += gridSize;
      platformCheckY(j, i+1, test);
      
      levelLayout[i + 1][j] = 'r'; //Overwriting the character keeps the slot from being read again and creating another platform.
    }                              //This is a lazy workaround, though, and must be changed in order to produce multiple levels.
  }
}

void platformCheckX(int j, int i, char test){
  if (j + 1 < levelLayout[i].length){
    if (levelLayout[i][j + 1] == test){
      xSize += gridSize;
        platformCheckX(j + 1, i, test);
        levelLayout[i][j + 1] = 'r';
    }
  }
}


